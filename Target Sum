class Solution {

private:   
    int f(int i,int target,vector<int>& nums,vector<vector<int>> &dp){
        if(i==0){
            if(target==0 && nums[0]==0) return 2;
            else if(target==0 || target==nums[0]) return 1;
            return 0;
        }

        if(dp[i][target]!=-1) return dp[i][target];
        int notTake=f(i-1,target,nums,dp);
        int take=0;
        if(nums[i]<=target) take=f(i-1,target-nums[i],nums,dp);

        return dp[i][target]=take+notTake;
    }

public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        // if(n==1){
        //     if(nums[0]==target || nums[0]==-target) return 1;
        //     return 0;
        // }
        int sum=0;
        for(auto it:nums) sum+=it;
        if(sum-target<0) return 0;
        if((sum-target)%2) return 0;

        int s=(sum-target)/2;
        vector<vector<int>> dp(n,vector<int>(s+1,-1));
        return f(n-1,s,nums,dp);
    }
};
