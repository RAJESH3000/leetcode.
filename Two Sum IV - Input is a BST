/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class BSTIterator{
    stack<TreeNode*> s;
    bool reverse=true;

public:
   BSTIterator(TreeNode* root,bool isreverse){
       reverse=isreverse;
       pushall(root);
   }
   
   int next(){
       TreeNode* node=s.top();
       s.pop();
       if(reverse==true) pushall(node->left);
       else pushall(node->right);
       return node->val;
   }

   private:
       void pushall(TreeNode* node){
            for(;node;){
                s.push(node);
                if(reverse) node=node->right;
                else node=node->left;
       }
   }
};




class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;
        BSTIterator l(root,false);
        BSTIterator r(root,true);
        int i=l.next(),j=r.next();
        while(i<j){
            if(i+j==k) return true;
            else if(i+j<k) i=l.next();
            else j=r.next();
        }
        return false;
    }
};
