class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dist(n,vector<int>(m,1e9));
        queue<pair<int,pair<int,int>>> q;
        if(grid[0][0]==0){
            q.push({1,{0,0}});
            dist[0][0]=1;
        }
        else return -1;
        int delrow[]={-1,1,0,0,-1,1,-1,1};
        int delcol[]={0,0,-1,1,-1,1,1,-1};
        while(!q.empty()){
            auto it=q.front();
            int dis=it.first;
            int row=it.second.first;
            int col=it.second.second;
            q.pop();
            for(int i=0;i<8;i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0 && 
                1+dis < dist[nrow][ncol]){
                    dist[nrow][ncol]=1+dis;
                    q.push({1+dis,{nrow,ncol}});
                }
            }
        }
        if(dist[n-1][m-1]==1e9) return -1;
        return dist[n-1][m-1];
    }
};
