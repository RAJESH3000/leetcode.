/************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
        public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>

int findmintime(map<BinaryTreeNode<int>*,BinaryTreeNode<int>*>& mpp,BinaryTreeNode<int>* target){
    map<BinaryTreeNode<int>*,int> visited;
    queue<BinaryTreeNode<int>*> q;
    q.push(target);
    visited[target]=1;
    int max=0;
    while(!q.empty()){
        int n=q.size();
        int flag=0;
        for(int i=0;i<n;i++){
            BinaryTreeNode<int>* node=q.front();
            q.pop();
            if(node->left && !visited[node->left]){
                flag=1;
                q.push(node->left);
                visited[node->left]=1;
            }
            if(node->right && !visited[node->right]){
                flag=1;
                q.push(node->right);
                visited[node->right]=1;
            }
            if(mpp[node] && !visited[mpp[node]]){
                flag=1;
                q.push(mpp[node]);
                visited[mpp[node]]=1;
            }
        }
        if(flag) max++;
    }
    return max;
}




BinaryTreeNode<int>* parents(BinaryTreeNode<int>* root,map<BinaryTreeNode<int>*,BinaryTreeNode<int>*>& mpp,int start){
    BinaryTreeNode<int>* res;
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()){
        BinaryTreeNode<int>* node=q.front();
        q.pop();
        if(node->data == start){
            res=node;
            break;
        }
        if(node->left){
            mpp[node->left]=node;
            q.push(node->left);
        }
        if(node->right){
            mpp[node->right]=node;
            q.push(node->right);
        }
    }
    return res;
}



int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    // Write your code here
     map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> mpp; 
    BinaryTreeNode<int>* target=parents(root,mpp,start);
    int maxi=findmintime(mpp,target);
    return maxi;
}
